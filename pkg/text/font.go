package text

import (
	"fmt"
	"image/png"

	"github.com/hajimehoshi/ebiten"

	_ "pokered/pkg/data/statik"
	"pokered/pkg/store"
	"pokered/pkg/util"
)

// CharCode number for char
type CharCode = uint

var charmap = map[string]CharCode{
	"ガ": 0x05,
	"ギ": 0x06,
	"グ": 0x07,
	"ゲ": 0x08,
	"ゴ": 0x09,
	"ザ": 0x0A,
	"ジ": 0x0B,
	"ズ": 0x0C,
	"ゼ": 0x0D,
	"ゾ": 0x0E,
	"ダ": 0x0F,
	"ヂ": 0x10,
	"ヅ": 0x11,
	"デ": 0x12,
	"ド": 0x13,
	"バ": 0x19,
	"ビ": 0x1A,
	"ブ": 0x1B,
	"ボ": 0x1C,
	"が": 0x26,
	"ぎ": 0x27,
	"ぐ": 0x28,
	"げ": 0x29,
	"ご": 0x2A,
	"ざ": 0x2B,
	"じ": 0x2C,
	"ず": 0x2D,
	"ぜ": 0x2E,
	"ぞ": 0x2F,
	"だ": 0x30,
	"ぢ": 0x31,
	"づ": 0x32,
	"で": 0x33,
	"ど": 0x34,
	"ば": 0x3A,
	"び": 0x3B,
	"ぶ": 0x3C,
	"べ": 0x3D,
	"ぼ": 0x3E,
	"パ": 0x40,
	"ピ": 0x41,
	"プ": 0x42,
	"ポ": 0x43,
	"ぱ": 0x44,
	"ぴ": 0x45,
	"ぷ": 0x46,
	"ぺ": 0x47,
	"ぽ": 0x48,
	"ア": 0x80,
	"イ": 0x81,
	"ウ": 0x82,
	"エ": 0x83,
	"ォ": 0x84,
	"カ": 0x85,
	"キ": 0x86,
	"ク": 0x87,
	"ケ": 0x88,
	"コ": 0x89,
	"サ": 0x8A,
	"シ": 0x8B,
	"ス": 0x8C,
	"セ": 0x8D,
	"ソ": 0x8E,
	"タ": 0x8F,
	"チ": 0x90,
	"ツ": 0x91,
	"テ": 0x92,
	"ト": 0x93,
	"ナ": 0x94,
	"ニ": 0x95,
	"ヌ": 0x96,
	"ネ": 0x97,
	"ノ": 0x98,
	"ハ": 0x99,
	"ヒ": 0x9A,
	"フ": 0x9B,
	"ホ": 0x9C,
	"マ": 0x9D,
	"ミ": 0x9E,
	"ム": 0x9F,
	"メ": 0xA0,
	"モ": 0xA1,
	"ヤ": 0xA2,
	"ユ": 0xA3,
	"ヨ": 0xA4,
	"ラ": 0xA5,
	"ル": 0xA6,
	"レ": 0xA7,
	"ロ": 0xA8,
	"ワ": 0xA9,
	"ヲ": 0xAA,
	"ン": 0xAB,
	"ッ": 0xAC,
	"ャ": 0xAD,
	"ュ": 0xAE,
	"ョ": 0xAF,
	"ィ": 0xB0,
	"あ": 0xB1,
	"い": 0xB2,
	"う": 0xB3,
	"え": 0xB4,
	"お": 0xB5,
	"か": 0xB6,
	"き": 0xB7,
	"く": 0xB8,
	"け": 0xB9,
	"こ": 0xBA,
	"さ": 0xBB,
	"し": 0xBC,
	"す": 0xBD,
	"せ": 0xBE,
	"そ": 0xBF,
	"た": 0xC0,
	"ち": 0xC1,
	"つ": 0xC2,
	"て": 0xC3,
	"と": 0xC4,
	"な": 0xC5,
	"に": 0xC6,
	"ぬ": 0xC7,
	"ね": 0xC8,
	"の": 0xC9,
	"は": 0xCA,
	"ひ": 0xCB,
	"ふ": 0xCC,
	"へ": 0xCD,
	"ほ": 0xCE,
	"ま": 0xCF,
	"み": 0xD0,
	"む": 0xD1,
	"め": 0xD2,
	"も": 0xD3,
	"や": 0xD4,
	"ゆ": 0xD5,
	"よ": 0xD6,
	"ら": 0xD7,
	"り": 0xD8,
	"る": 0xD9,
	"れ": 0xDA,
	"ろ": 0xDB,
	"わ": 0xDC,
	"を": 0xDD,
	"ん": 0xDE,
	"っ": 0xDF,
	"ゃ": 0xE0,
	"ゅ": 0xE1,
	"ょ": 0xE2,
	"ー": 0xE3,

	"<pkmn>":   0x4A, // PkMn
	"@":        0x50, // 終端記号
	"<PLAYER>": 0x52, // プレイヤーの名前を表す(wPlayerName)
	"<RIVAL>":  0x53, // ライバルの名前
	"#":        0x54, // POKéを表すバイトデータ
	"<TARGET>": 0x59, // ポケモンバトルにおける技のターゲット
	"<USER>":   0x5A, // ポケモンバトルにおける自分のポケモン(相手ターンなら相手のポケモンになる)
	":L":       0x6e,
	"′":        0x71,
	"″":        0x73,
	"№":        0x74,
	"…":        0x75,

	"┌": 0x79,
	"─": 0x7A,
	"┐": 0x7B,
	"│": 0x7C,
	"└": 0x7D,
	"┘": 0x7E,

	" ":  0x7F,
	"A":  0x80,
	"B":  0x81,
	"C":  0x82,
	"D":  0x83,
	"E":  0x84,
	"F":  0x85,
	"G":  0x86,
	"H":  0x87,
	"I":  0x88,
	"J":  0x89,
	"K":  0x8A,
	"L":  0x8B,
	"M":  0x8C,
	"N":  0x8D,
	"O":  0x8E,
	"P":  0x8F,
	"Q":  0x90,
	"R":  0x91,
	"S":  0x92,
	"T":  0x93,
	"U":  0x94,
	"V":  0x95,
	"W":  0x96,
	"X":  0x97,
	"Y":  0x98,
	"Z":  0x99,
	"(":  0x9A,
	")":  0x9B,
	":":  0x9C,
	";":  0x9D,
	"[":  0x9E,
	"]":  0x9F,
	"a":  0xA0,
	"b":  0xA1,
	"c":  0xA2,
	"d":  0xA3,
	"e":  0xA4,
	"f":  0xA5,
	"g":  0xA6,
	"h":  0xA7,
	"i":  0xA8,
	"j":  0xA9,
	"k":  0xAA,
	"l":  0xAB,
	"m":  0xAC,
	"n":  0xAD,
	"o":  0xAE,
	"p":  0xAF,
	"q":  0xB0,
	"r":  0xB1,
	"s":  0xB2,
	"t":  0xB3,
	"u":  0xB4,
	"v":  0xB5,
	"w":  0xB6,
	"x":  0xB7,
	"y":  0xB8,
	"z":  0xB9,
	"é":  0xBA,
	"'d": 0xBB,
	"'l": 0xBC,
	"'s": 0xBD,
	"'t": 0xBE,
	"'v": 0xBF,

	"'": 0xE0,
	"袋": 0xE1,
	"怪": 0xE2,

	"-":  0xE3,
	"'r": 0xE4,
	"'m": 0xE5,
	"?":  0xE6,
	"!":  0xE7,
	".":  0xE8,
	"&":  0xE9,

	"▷":  0xEC,
	"▶":  0xED,
	"▶︎": 0xED,
	"▲":  0xED,
	"▼":  0xEE,
	"♂":  0xEF,
	"¥":  0xF0,
	"×":  0xF1,
	"⠄":  0xF2,
	"/":  0xF3,
	",":  0xF4,
	"♀":  0xF5,
	"0":  0xf6,
	"1":  0xf7,
	"2":  0xf8,
	"3":  0xf9,
	"4":  0xfa,
	"5":  0xfb,
	"6":  0xfc,
	"7":  0xfd,
	"8":  0xfe,
	"9":  0xff,
}

var fontmap map[string]*ebiten.Image = newFontmap()

// IsCorrectChar check char is correct
func IsCorrectChar(char string) bool {
	_, ok := fontmap[char]
	if !ok {
		util.NotRegisteredError("fontmap", char)
	}
	return ok
}

func newFontmap() map[string]*ebiten.Image {
	fontmap := map[string]*ebiten.Image{}
	for char, charCode := range charmap {
		path := fmt.Sprintf("/%d.png", charCode)
		f, err := store.FS.Open(path)
		if err != nil {
			// NOTE: NotFoundFileError isn't needed
			continue
		}
		defer f.Close()

		img, _ := png.Decode(f)
		fontmap[char], _ = ebiten.NewImageFromImage(img, ebiten.FilterDefault)
	}
	return fontmap
}
